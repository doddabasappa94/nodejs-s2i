#!/bin/bash
set -e
# Check to see if there is a node_modules folder
if [ "$(ls -A /tmp/src/node_modules)" ]; then
        echo "---> Removing the node_modules folder"
        rm -rf /tmp/src/node_modules
fi

chmod 775 -R /tmp/src/.

echo "---> Installing application source ..."
mv /tmp/src/* ./

if [ ! -z $HTTP_PROXY ]; then
	echo "---> Setting npm http proxy to $HTTP_PROXY"
	npm config set proxy $HTTP_PROXY
fi

if [ ! -z $http_proxy ]; then
	echo "---> Setting npm http proxy to $http_proxy"
	npm config set proxy $http_proxy
fi

if [ ! -z $HTTPS_PROXY ]; then
	echo "---> Setting npm https proxy to $HTTPS_PROXY"
	npm config set https-proxy $HTTPS_PROXY
fi

if [ ! -z $https_proxy ]; then
	echo "---> Setting npm https proxy to $https_proxy"
	npm config set https-proxy $https_proxy
fi

if [ ! -z $NO_PROXY ]; then
	echo "---> Setting npm no proxy config to $NO_PROXY"
	npm config set no-proxy $NO_PROXY
fi

if [ ! -z $no_proxy ]; then
	echo "---> Setting npm no proxy config to $no_proxy"
	npm config set no-proxy $no_proxy
fi

# Change the npm registry mirror if provided
if [ ! -z "$NPM_MIRROR" ]; then
    echo "---> Setting the npm package mirror to $NPM_MIRROR"
	npm config set registry $NPM_MIRROR
fi

if [ "$(ls /tmp/artifacts/ 2>/dev/null)" ]; then
  echo "---> Restoring build artifacts..."
  mv /tmp/artifacts/node_modules ./
fi

echo "---> Building your Web Application from source"
echo -e "Current git config"
git config --list
if [ ! -z "$YARN_ENABLED" ]; then
        echo "---> Using 'yarn install' with YARN_ARGS"
        npx yarn install $YARN_ARGS
        $YARN_BUILD
else
	echo "---> Installing all dependencies"
	echo "---> Using 'npm install'"
	npm install -s
	#do not fail when there is no build script
	echo "---> Building in production mode"
	$NPM_BUILD --if-present
	echo "---> Cleaning up npm cache"
	rm -rf .npm
	echo "---> Pruning the development dependencies"
	npm prune
fi

# Fix source directory permissions
fix-permissions ./

